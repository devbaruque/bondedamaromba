import supabase from '../services/supabase';

/**
 * Utilit√°rio para testar autentica√ß√£o no Supabase
 */

/**
 * Testa o login com email e senha
 * @param {string} email Email do usu√°rio
 * @param {string} password Senha do usu√°rio
 * @returns {Promise} Resultado do teste
 */
export async function testLogin(email, password) {
  console.log(`üîë Testando login com: ${email}`);
  
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });

    if (error) {
      console.error(`‚ùå Erro no login: ${error.message}`);
      return { error: error.message };
    }

    console.log(`‚úÖ Login bem-sucedido para: ${email}`);
    console.log(`üë§ Dados do usu√°rio: ${JSON.stringify({
      id: data.user.id,
      email: data.user.email,
      lastSignIn: data.user.last_sign_in_at
    })}`);

    return { data };
  } catch (e) {
    console.error(`‚ùå Erro inesperado no login: ${e.message}`);
    return { error: e.message };
  }
}

/**
 * Verifica se h√° uma sess√£o ativa
 * @returns {Promise} Resultado do teste
 */
export async function checkSession() {
  console.log(`üîç Verificando sess√£o atual`);
  
  try {
    const { data, error } = await supabase.auth.getSession();

    if (error) {
      console.error(`‚ùå Erro ao verificar sess√£o: ${error.message}`);
      return { error: error.message };
    }

    if (!data.session) {
      console.error(`‚ùå Erro ao verificar sess√£o: Sess√£o n√£o encontrada`);
      return { error: 'Sess√£o n√£o encontrada' };
    }

    console.log(`‚úÖ Sess√£o v√°lida encontrada`);
    console.log(`üë§ Usu√°rio autenticado: ${data.session.user.email}`);
    return { data };
  } catch (e) {
    console.error(`‚ùå Erro inesperado ao verificar sess√£o: ${e.message}`);
    return { error: e.message };
  }
}

/**
 * Tenta fazer logout
 * @returns {Promise} Resultado do teste
 */
export async function testLogout() {
  console.log(`üö™ Testando logout`);
  
  try {
    const { error } = await supabase.auth.signOut();

    if (error) {
      console.error(`‚ùå Erro ao fazer logout: ${error.message}`);
      return { error: error.message };
    }

    console.log(`‚úÖ Logout realizado com sucesso`);
    return { success: true };
  } catch (e) {
    console.error(`‚ùå Erro inesperado ao fazer logout: ${e.message}`);
    return { error: e.message };
  }
}

/**
 * Executa todos os testes de autentica√ß√£o
 * @param {string} email Email do usu√°rio para teste
 * @param {string} password Senha do usu√°rio para teste
 */
export async function runFullLoginTest(email, password) {
  console.log(`\nüß™ INICIANDO TESTES DE LOGIN\n`);
  
  // Testar login
  const loginResult = await testLogin(email, password);
  if (loginResult.error) {
    console.error(`‚ùå TESTE DE LOGIN FALHOU`);
    return { success: false, error: loginResult.error };
  }
  
  // Verificar sess√£o
  const sessionResult = await checkSession();
  if (sessionResult.error) {
    console.error(`‚ùå TESTE DE SESS√ÉO FALHOU`);
    return { success: false, error: sessionResult.error };
  }
  
  // Testar logout
  const logoutResult = await testLogout();
  if (logoutResult.error) {
    console.error(`‚ùå TESTE DE LOGOUT FALHOU`);
    return { success: false, error: logoutResult.error };
  }

  // Verificar se logout funcionou
  const finalCheck = await checkSession();
  if (!finalCheck.error) {
    console.error(`‚ùå TESTE FINAL FALHOU - AINDA H√Å UMA SESS√ÉO ATIVA`);
    return { success: false, error: 'Logout n√£o encerrou a sess√£o corretamente' };
  }

  console.log(`\n‚úÖ TODOS OS TESTES DE LOGIN CONCLU√çDOS COM SUCESSO\n`);
  return { success: true };
}

/**
 * Solicita redefini√ß√£o de senha para um email
 * @param {string} email Email do usu√°rio
 * @returns {Promise} Resultado do processo
 */
export async function requestPasswordReset(email) {
  console.log(`üîë Solicitando redefini√ß√£o de senha para: ${email}`);
  
  try {
    const { data, error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: 'bondedamaromba://reset-password',
    });

    if (error) {
      console.error(`‚ùå Erro ao solicitar redefini√ß√£o: ${error.message}`);
      return { error: error.message };
    }

    console.log(`‚úÖ Email de redefini√ß√£o enviado para: ${email}`);
    return { success: true };
  } catch (e) {
    console.error(`‚ùå Erro inesperado ao solicitar redefini√ß√£o: ${e.message}`);
    return { error: e.message };
  }
}

/**
 * Verifica o status de confirma√ß√£o de um email
 * @param {string} email Email do usu√°rio
 * @returns {Promise} Resultado da verifica√ß√£o
 */
export async function checkEmailConfirmationStatus(email) {
  console.log(`üìß Verificando status de confirma√ß√£o para: ${email}`);
  
  try {
    // Infelizmente, a API p√∫blica n√£o oferece uma maneira direta de checar o status
    // de confirma√ß√£o de um email espec√≠fico. A melhor abordagem √© tentar fazer login 
    // e verificar se h√° erro de "Email not confirmed"
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password: 'senha-incorreta-para-testar-status' // Senha incorreta deliberadamente 
    });

    if (error) {
      if (error.message === 'Email not confirmed') {
        console.log(`‚ö†Ô∏è Email ainda n√£o confirmado: ${email}`);
        return { confirmed: false, reason: 'not_confirmed' };
      } else if (error.message === 'Invalid login credentials') {
        // Se o erro for de credenciais inv√°lidas, significa que o email existe e est√° confirmado,
        // s√≥ a senha que est√° incorreta
        console.log(`‚úÖ Email confirmado: ${email}`);
        return { confirmed: true };
      } else {
        console.error(`‚ùå Erro ao verificar status: ${error.message}`);
        return { error: error.message };
      }
    }

    // Se n√£o houver erro, significa que o login foi bem-sucedido (improv√°vel neste teste)
    console.log(`‚úÖ Email confirmado e credenciais corretas: ${email}`);
    return { confirmed: true };
  } catch (e) {
    console.error(`‚ùå Erro inesperado ao verificar status: ${e.message}`);
    return { error: e.message };
  }
}

export default {
  testLogin,
  checkSession,
  testLogout,
  runFullLoginTest,
  requestPasswordReset,
  checkEmailConfirmationStatus
}; 